<?php
/*
Plugin Name: XML Sitemap Feed
Plugin URI: http://4visions.nl/en/wordpress-plugins/xml-sitemap-feed/
Description: Creates a feed that complies with the XML Sitemap protocol ready for indexing by Google, Yahoo, Bing, Ask and others. Happy with it? Please leave me a <strong><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=ravanhagen%40gmail%2ecom&item_name=XML%20Sitemap%20Feed&item_number=3%2e8&no_shipping=0&tax=0&bn=PP%2dDonationsBF&charset=UTF%2d8&lc=us">Tip</a></strong> for development and support time. Thanks :)
Version: 3.8.7
Author: RavanH
Author URI: http://4visions.nl/
*/

/*  Copyright 2009 RavanH  (http://4visions.nl/ email : ravanhagen@gmail.com)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/* --------------------
 *  AVAILABLE HOOKS
 * --------------------
 *
 * FILTERS
 *	xml_sitemap_url	->	Filters the URL used in the sitemap reference in robots.txt
 *				(receives an ARRAY and MUST return one; can be multiple urls) 
 *				and for the home URL in the sitemap (receives a STRING and MUST)
 *				return one) itself. Useful for multi language plugins or other 
 *				plugins that affect the blogs main URL... See pre-defined filter
 *				XMLSitemapFeed::qtranslate() in this file as an example.
 * ACTIONS
 *	[ none at this point, but feel free to request, suggest or code one :) ]
 *	
 */

/* --------------------
 *      CLASS
 * -------------------- */
if(!class_exists(XMLSitemapFeed)) {
 class XMLSitemapFeed {

	function go() {
		// set version
		define('XMLSF_VERSION','3.8.7');

		$xmlsf_dir = dirname(__FILE__);
		define('XMLSF_PLUGIN_DIR', $xmlsf_dir);
		if (file_exists($xmlsf_dir.'/xml-sitemap-feed'))
			define('XMLSF_PLUGIN_SUBDIR', '/xml-sitemap-feed');
		else
			define('XMLSF_PLUGIN_SUBDIR', '');

		if ( '0' == get_option( 'blog_public' ) || ( $wpdb->blogid && function_exists('get_site_option') && get_site_option('tags_blog_id') == $wpdb->blogid ) ) {
			// we are on a blog that blocks spiders!
			// create NO sitemap
			// - OR -
			// we are on wpmu and this is a tags blog!
			// create NO sitemap since it will be full 
			// of links outside the blogs own domain...
		} else {
			// INIT
			add_action('init', array(__CLASS__, 'init') );
	
			// FEEDS
			add_action('do_feed_sitemap', array(__CLASS__, 'load_template'), 10, 1);

			// REWRITES
			add_filter('generate_rewrite_rules', array(__CLASS__, 'rewrite') );

			// ROBOTSTXT
			add_action('do_robotstxt', array(__CLASS__, 'robots'), 1 );
		}

		// DE-ACTIVATION
		register_deactivation_hook( __FILE__, array(__CLASS__, 'deactivate') );
	}

	// FEEDS //
	// set up the feed template
	function load_template() {
		load_template( XMLSF_PLUGIN_DIR . XMLSF_PLUGIN_SUBDIR . '/feed-sitemap.php' );
	}

	// REWRITES //
	// add sitemap rewrite rules
	function rewrite($wp_rewrite) {
		$feed_rules = array(
			'sitemap.xml$' => $wp_rewrite->index . '?feed=sitemap',
		);
		$wp_rewrite->rules = $feed_rules + $wp_rewrite->rules;
	}

	// ROBOTSTXT //
	// add sitemap location in robots.txt generated by WP
	// available filter : robotstxt_sitemap_url
	function robots() {

		// hook for filter 'xml_sitemap_url' provides an array here and MUST get an array returned
		$sitemap_array = apply_filters('xml_sitemap_url',array(trailingslashit(get_bloginfo('url'))."sitemap.xml"));

		echo "\n# XML Sitemap Feed ".XMLSF_VERSION." (http://4visions.nl/en/wordpress-plugins/xml-sitemap-feed/)";

		if ( is_array($sitemap_array) && !empty($sitemap_array) )
			foreach ( $sitemap_array as $url )
				echo "\nSitemap: " . $url;
		else
			echo "\n# Warning: xml sitemap url is missing, filtered out or filter did not return an array.";
	
		echo "\n\n";
	}

	// DE-ACTIVATION
	function deactivate() {
		remove_filter('generate_rewrite_rules', array(__CLASS__, 'rewrite') );
		delete_option('xml-sitemap-feed-version');
		global $wp_rewrite;
		$wp_rewrite->flush_rules();
	}

	// MULTI-LANGUAGE PLUGIN FILTERS

	// qTranslate
	function qtranslate($input) {
		global $q_config;

		if (is_array($input)) // got an array? return one!
			foreach ( $input as $url )
				foreach($q_config['enabled_languages'] as $language)
					$return[] = qtrans_convertURL($url,$language);
		else // not an array? just convert the string.
			$return = qtrans_convertURL($input);

		return $return;
	}

	// xLanguage
	function xlanguage($input) {
		global $xlanguage;
	
		if (is_array($input)) // got an array? return one!
			foreach ( $input as $url )
				foreach($xlanguage->options['language'] as $language)
					$return[] = $xlanguage->filter_link_in_lang($url,$language['code']);
	 	else // not an array? just convert the string.
	       		$return = $xlanguage->filter_link($input);

		return $return;
	}

	function init() {
		// FLUSH RULES after (site wide) plugin upgrade
		if (get_option('xml-sitemap-feed-version') != XMLSF_VERSION) {
			update_option('xml-sitemap-feed-version', XMLSF_VERSION);
			global $wp_rewrite;
			$wp_rewrite->flush_rules();
		}

		// check for qTranslate and add filter
		if (defined('QT_LANGUAGE'))
			add_filter('xml_sitemap_url', array(__CLASS__, 'qtranslate'), 99);

		// check for xLanguage and add filter
		if (defined('xLanguageTagQuery'))
			add_filter('xml_sitemap_url', array(__CLASS__, 'xlanguage'), 99);
	}

 }
}

XMLSitemapFeed::go();


/* -------------------------------------
 *      MISSING WORDPRESS FUNCTIONS
 * ------------------------------------- */

require_once(XMLSF_PLUGIN_DIR . XMLSF_PLUGIN_SUBDIR . '/hacks.php');

if( !function_exists('get_firstmodified') ) {
 function get_firstmodified($timezone = 'server') {
	$firstpostmodified = get_firstpostmodified($timezone);
	$firstpagemodified = get_firstpagemodified($timezone);
	if ( mysql2date('U',$firstpostmodified) < mysql2date('U',$firstpagemodified) )
		return $firstpostmodified;
	else
		return $firstpagemodified;
 }
}

if( !function_exists('get_lastmodified') ) {
 function get_lastmodified($timezone = 'server') {
	$lastpostmodified = get_lastpostmodified($timezone);
	$lastpagemodified = get_lastpagemodified($timezone);
	if ( mysql2date('U',$lastpostmodified) > mysql2date('U',$lastpagemodified) )
		return $lastpostmodified;
	else
		return $lastpagemodified;
 }
}
